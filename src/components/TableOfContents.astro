---
import { isFeatureEnabled } from '@utils/config';

export interface Props {
  headings: {
    depth: number;
    slug: string;
    text: string;
  }[];
}

const { headings } = Astro.props;

// Check if table of contents feature is enabled
const isTocEnabled = isFeatureEnabled('tableOfContents');

// If the feature is disabled, return early
if (!isTocEnabled) return;

// Only render h2 and h3 headings
const toc = headings.filter(h => h.depth >= 2 && h.depth <= 3);
---

{toc.length > 0 && (
  <nav class="toc not-prose bg-slate-50 dark:bg-slate-800 p-4 rounded-lg mb-8 sticky top-4">
    <h2 class="text-lg font-semibold mb-3">Table of Contents</h2>
    <ul class="space-y-1">
      {toc.map(heading => (
        <li class={`${heading.depth === 3 ? 'ml-4' : ''}`}>
          <a
            href={`#${heading.slug}`}
            class="text-sm hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors block py-1"
          >
            {heading.text}
          </a>
        </li>
      ))}
    </ul>
  </nav>
)}

<script>
  // Initialize Table of Contents functionality
  function initTableOfContents() {
    const observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.5
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        const id = entry.target.getAttribute('id');
        if (id) {
          const tocLink = document.querySelector(`.toc a[href="#${id}"]`);
          if (tocLink) {
            if (entry.isIntersecting) {
              document.querySelectorAll('.toc a').forEach(link => {
                link.classList.remove('text-indigo-600', 'dark:text-indigo-400', 'font-medium');
              });
              tocLink.classList.add('text-indigo-600', 'dark:text-indigo-400', 'font-medium');
            }
          }
        }
      });
    }, observerOptions);

    // Track all headings that have an ID applied
    document.querySelectorAll('h2[id], h3[id]').forEach(heading => {
      observer.observe(heading);
    });

    // Add smooth scroll behavior to TOC links
    document.querySelectorAll('.toc a[href^="#"]').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
          
          // Update URL without jumping
          history.pushState(null, null, `#${targetId}`);
        }
      });
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTableOfContents);
  } else {
    initTableOfContents();
  }
</script>